import re
from typing import List
from bs4 import BeautifulSoup, NavigableString

# ---------- PAGE BOILERPLATE FILTERS ----------
SKIP_TAGS = {"header", "footer", "nav", "aside", "script", "style"}
BOILERPLATE_CLASS_OR_ID = re.compile(
    r"(wb-inv|pagedetails|gc-main-footer|gc-sub-footer|gc-contextual|wtrmrk|breadcrumb|"
    r"site-footer|menu|global-nav|mega-menu|skip-link|toolbar|wb-slc|gcweb-menu)",
    re.I,
)

class ChangeSummarizer:
    """
    Summarizes visible textual changes from an HTML diff (<ins>/<del> tags).
    No classification step — everything extracted is passed to the LLM summarizer.
    """

    def __init__(self, logger, openai_client, model: str = "gpt-4o-mini"):
        self.logger = logger
        self.openai_client = openai_client
        self.model = model

    def summarize_changes(self, diff_text: str) -> str:


        prompt = (
        "You are given a diff generated by git diff with '+' for additions and '-' for deletions.\n\n"
        "Your task:\n"
        "1. Ignore unchanged/context lines.\n"
        "2. Rewrite changes as plain human-readable bullet points, without '+' or '-'.\n"
        "3. If a line was removed and then added with new content, merge them into one bullet point "
        "describing the update.\n"
        "4. Keep the meaning strictly faithful, only rephrase for clarity.\n\n"
        f"Diff:\n{diff_text}\n\n"
        "Now produce the summary as bullet points:"
    )


        return self._call_openai(prompt, "summary")

    def translate_text(self, text: str, target_language: str = "Chinese") -> str:
        """
        Translate any given text to the target language while preserving formatting.
        """
        prompt = (
            f"Translate the following text to {target_language} while strictly preserving "
            "all original formatting including line breaks, spacing, punctuation, and special characters. "
            "Do not modify or rearrange the structure—only translate the textual content:\n\n"
            f"{text}"
        )
        return self._call_openai(prompt, "translation")

    

    def _call_openai(self, prompt: str, operation: str) -> str:
        try:
            self.logger.info(f"Requesting {operation} from OpenAI...")
            completion = self.openai_client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "Be concise. Follow the user's instructions exactly."},
                    {"role": "user", "content": prompt},
                ],
                temperature=0.0,
                timeout=20
            )
            content = completion.choices[0].message.content.strip()
            self.logger.info(f"Successfully completed {operation}")
            return content
        except Exception as e:
            self.logger.error(f"OpenAI API failed during {operation}: {str(e)}")
            raise
